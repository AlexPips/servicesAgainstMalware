import sys
import time
import radix
import requests
from shodan import Shodan
from xml.dom import minidom
from xml.dom.minidom import parseString
from collections import defaultdict


rtree = radix.Radix()  # This data structure will store the AWS IP prefixes
r = requests.get("https://ip-ranges.amazonaws.com/ip-ranges.json").json()
# print(r)
for p in r["prefixes"]:
    if p["service"] == "EC2": 
        rtree.add(p["ip_prefix"])


SHODAN_API_KEY = sys.argv[1]

debug_flag = sys.argv[2]

# ip -> set([vuln_id_1, vuln_id_2, ...])
ip_to_vulnerabilities = defaultdict(set)
if debug_flag == "debug":
    # Query an IP address using the Shodan REST API
    r = requests.get("https://api.shodan.io/shodan/host/{}?key={}".format(ip, SHODAN_API_KEY))
    # The response from the REST API is returned as JSON array
    data = r.json()

    for d in data["data"]:
        if "vulns" in d and len(d["vulns"]) > 0:
            for vulnerability_id in d["vulns"]:
                ip_to_vulnerabilities[ip].add(vulnerability_id)

api = Shodan(SHODAN_API_KEY)

results = api.search('apache')
print('Results found: {}'.format(results['total']))
print('Results found: {}'.format(len(results['matches'])))

mydoc = minidom.parse('official-cpe-dictionary_v2.3.xml')
items = mydoc.getElementsByTagName('cpe-item')
#total amount of items
print(len(items))

# dom = parseString('official-cpe-dictionary_v2.3.xml')
for s in mydoc.getElementsByTagName('cpe-item'):
    if s.getAttribute('name') == 'cpe:/a:10-strike:network_monitor:1.1':
        print(s.childNodes[0].data)

    #cpeData = mydoc.getElementsByName("cpe:/a:10-strike:network_monitor:1.1")
        #"cpe:/a:10-strike:network_monitor:1.0"


# For every IP in the Shodan results check if it's whithin the AWS IP prefixes
# AS16509 is the Amazon AS Number
page_counter = 1
while True:
    shodan_aws_query = "https://api.shodan.io/shodan/host/search?key={}&query=asn:AS16509&page={}".format(SHODAN_API_KEY, page_counter)
    print(shodan_aws_query)
    r = requests.get(shodan_aws_query)
    data = r.json()
    if 'error' in data:
        print('error')
        break
    if len(data['matches']) == 0:
        break
    for result in data['matches']:
        ip = result['ip_str']
        if rtree.search_best(ip):                
            # Query an IP address using the Shodan REST API
            # time.sleep(1)
            # r = requests.get("https://api.shodan.io/shodan/host/{}?key={}".format(ip, SHODAN_API_KEY))
            # The response from the REST API is returned as JSON array

            if "vulns" in result and len(result["vulns"]) > 0:
                for vulnerability_id in result["vulns"]:
                    ip_to_vulnerabilities[ip].add(vulnerability_id)
            print(ip, ip_to_vulnerabilities[ip])
    page_counter += 1
    time.sleep(1)


with open("ip_to_vulnerabilities.txt", "w") as fout:
    for ip, vulnerabilities in ip_to_vulnerabilities.items():
        output_line = "{}|{}\n".format(ip, ','.join(vulnerabilities))
        fout.write(output_line)

